<?xml version="1.0"?>

<launch>

  <!-- ROS-Pybullet interface node simulator -->
    <node
        name="ros_pybullet_interface_node"
        pkg="ros_pybullet_interface"
        type="ros_pybullet_interface_node.py"
        clear_params="true"
        output="screen">
      k
      <!-- Pybullet simulation config (required) -->
      <!-- Flag to indicate how bullet simulation step is
           synced with ROS control loop.
           Options:
                0:  pybullet executes all simulation steps in a fixed frequency
                       This can be used to simulate real world
                       ( use simulation freqency > 250 Hz)
                1: pybullet executes every simulation step when commanded by ROS node
                       This can be used to execute one simulation step after one control/interface step
                       Useful for debugging, but not realistic
                       (specially, if control loop freqency is < 250 Hz)
                2: pybullet executes a simulation step when ROS srv manualPybulletSteps is called
                   This can be used to execute one simulation step after one control/interface step
                   Useful for debugging MPC-like algorithms, but not realistic
                  -->
    <param
        name="pybullet_sim_self_loop"
        value="2"
        type="int"/>
    <param
        name="Z_gravity"
        value="-9.81"
        type="double"/>

    <!-- <!-1- Config file for Pybullet -1-> -->
    <!-- <param name="pybullet_config" value="{ros_pybullet_interface_examples}/configs/pybullet_basic_example.yaml" type="str"/> -->

    <!-- Node frequency -->
    <param name="ros_node_freq" value="100" type="int"/>

    <!-- Simulated robot -->
    <rosparam param="robot_config_file_names">
      [
      "{ros_pybullet_interface}/configs/nextage.yaml",
      ]
    </rosparam>

    <rosparam param="collision_object_config_file_names">
      [
      '{ros_pybullet_interface}/configs/table_lwr_sliding.yaml',
      '{ros_pybullet_interface}/configs/sliding_obs.yaml',
      ]
    </rosparam>

    <rosparam param="visual_object_config_file_names">
      [
        '{ros_pybullet_interface}/configs/sphere_sliding_sim.yaml',
        '{ros_pybullet_interface}/configs/visual_sliding_box.yaml',
      ]
    </rosparam>
    <rosparam param="object_config_file_names">
        [
        '{ros_pybullet_interface}/configs/nextage_sliding_box.yaml',
        ]
    </rosparam>
    <param
        name="camera_config"
        value="{ros_pybullet_interface}/configs/camera.yaml"
        type="str"/>

  </node>

  <!-- <!-1- Example node -1-> -->
  <!-- <node pkg="ros_pybullet_interface_examples" name="basic_robot_example_node" type="basic_robot_example_node.py"> -->
  <!--   <param name="robot_name" type="str" value="nextage"/> -->
  <!-- </node> -->

<!-- PyRBDL4dIK Environmet node (receiver - publisher) -->
<node
    name="ros_PyRBDL4dIK_interface"
    pkg="ros_pybullet_interface"
    type="ros_rbdl_IK_interace_node.py"
    output="screen">
    <param
        name="robot_config"
        value="{ros_pybullet_interface}/configs/nextage.yaml"
        type="str"/>
</node>


  <!-- Static tf frames -->
  <node
      pkg="tf2_ros"
      type="static_transform_publisher"
      name="simulated_robot_base_tf_broadcaster"
      args="0.0 0.0 0.85 0 0 0 rpbi/world nextage_base"/>
  <node
      pkg="tf2_ros"
      type="static_transform_publisher"
      name="table_tf_broadcaster"
      args="0.6 0.0 -0.15 1.57 0.0 0.0 ros_pybullet_interface/world ros_pybullet_interface/table_sliding"
      /> 

</launch>
