<launch>


  <!-- Launch ROS-PyBullet interface -->
  <!-- Launch ROS-PyBullet interface -->
  <node
      name="ros_pybullet_interface"
      pkg="ros_pybullet_interface"
      type="ros_pybullet_interface_node.py"
      clear_params="true"
      output="screen">

    <!-- Pybullet simulation config (required) -->
    <!-- Flag to indicate how bullet simulation step is
         synced with ROS control loop.
         Options:
              true:  pybullet executes all simulation steps in a fixed frequency
                     This can be used to simulate real world
                     ( use simulation freqency > 250 Hz)
              false: pybullet executes every simulation step when commanded by ROS node
                     This can be used to execute one simulation step after one control/interface step
                     Useful for debugging, but not realistic
                     (specially, if control loop freqency is < 250 Hz)-->
    <param
        name="pybullet_sim_self_loop"
        value="true"
        type="bool"/>

    <!-- Robot config (required) -->
    <param
        name="robot_config"
        value="configs/kuka_push.yaml"
        type="str"/>

    <!-- Camera config (required) -->
    <param
        name="camera_config"
        value="configs/camera.yaml"
        type="str"/>


    <!-- List collision objects (optional) -->
    <rosparam param="collision_object_config_file_names">
      [
      'configs/table.yaml',
      ]
    </rosparam>

    <!-- List visual objects (optional) -->
    <rosparam param="visual_object_config_file_names">
      [
      'configs/box.yaml',
      'configs/box1.yaml',
      'configs/box2.yaml',
      ]
    </rosparam>

    <!-- List objects (optional) -->
    <rosparam param="object_config_file_names">
      [
      'configs/box3.yaml',
      ]
    </rosparam>


  </node>


    <!-- PyRBDL4dIK Environmet node (receiver - publisher) -->
    <node
        name="ros_PyRBDL4dIK_interface"
        pkg="ros_pybullet_interface"
        type="ros_rbdl_IK_interace_node.py"
        output="screen">

      <param
          name="robot_config"
          value="configs/kuka_push.yaml"
          type="str"/>

    </node>


  <node
      name="ros_traj_consum_interpol_interface1"
      pkg="ros_pybullet_interface"
      type="ros_traj_consum_interpol_interface_node.py"
      output="screen">

    <!-- Traj config (required) -->
    <param
        name="traj_config"
        value="configs/traj_kuka.yaml"
        type="str"/>

  </node>

  <node
      name="ros_traj_consum_interpol_interface2"
      pkg="ros_pybullet_interface"
      type="ros_traj_consum_interpol_interface_node.py"
      output="screen">

    <!-- Traj config (required) -->
    <param
        name="traj_config"
        value="configs/traj_box.yaml"
        type="str"/>

  </node>



  <node
      pkg="tf2_ros"
      type="static_transform_publisher"
      name="table_tf_broadcaster"
      args="1.25 1.25 -0.075 -1.5707963267948966 0.0 3.141592653589793 ros_pybullet_interface/world table"
      />

    <node
        pkg="tf2_ros"
        type="static_transform_publisher"
        name="box1_tf_broadcaster"
        args="-0.05 0.75 0.07 0.0 0.0 0.0 ros_pybullet_interface/world ros_pybullet_interface/box1"
        />

    <node
        pkg="tf2_ros"
        type="static_transform_publisher"
        name="box2_tf_broadcaster"
        args="0.4 0.0 -0.06 0.0 0.0 0.0 ros_pybullet_interface/world ros_pybullet_interface/box2"
        />


      <!-- Testing node trajectory publisher -->
      <node name="test_ros_interpol_interface"
          pkg="ros_pybullet_interface"
          type="test_ros_interpol_interface.py"
          output="screen">

          <param
              name="only_object"
              value="false"
              type="bool"/>

        </node>


</launch>
