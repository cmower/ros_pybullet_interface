<?xml version="1.0"?>

<launch>


  <!-- Launch ROS-PyBullet interface -->
  <!-- Launch ROS-PyBullet interface -->
  <node
      name="ros_pybullet_interface"
      pkg="ros_pybullet_interface"
      type="ros_pybullet_interface_node.py"
      clear_params="true"
      output="screen">

      <!-- Pybullet simulation config (required) -->
      <!-- Flag to indicate how bullet simulation step is
           synced with ROS control loop.
           Options:
                0:  pybullet executes all simulation steps in a fixed frequency
                       This can be used to simulate real world
                       ( use simulation freqency > 250 Hz)
                1: pybullet executes every simulation step when commanded by ROS node
                       This can be used to execute one simulation step after one control/interface step
                       Useful for debugging, but not realistic
                       (specially, if control loop freqency is < 250 Hz)
                2: pybullet executes a simulation step when ROS srv manualPybulletSteps is called
                   This can be used to execute one simulation step after one control/interface step
                   Useful for debugging MPC-like algorithms, but not realistic
                  -->
    <param
        name="pybullet_sim_self_loop"
        value="2"
        type="int"/>

    <param
       name="Z_gravity"
       value="-9.81"
       type="double"/>

    <!-- Robot config (required) -->
    <rosparam param="robot_config_file_names">
      [
      "{ros_pybullet_interface}/configs/kuka_push.yaml",
      ]
    </rosparam>
    <!-- Camera config (required) -->
    <param
        name="camera_config"
        value="{ros_pybullet_interface}/configs/camera.yaml"
        type="str"/>


    <!-- List collision objects (optional) -->
    <rosparam param="collision_object_config_file_names">
      [
      '{ros_pybullet_interface}/configs/table.yaml',
      ]
    </rosparam>

    <!-- List visual objects (optional) -->
    <rosparam param="visual_object_config_file_names">
      [
      '{ros_pybullet_interface}/configs/box.yaml',
      '{ros_pybullet_interface}/configs/box1.yaml',
      '{ros_pybullet_interface}/configs/box2.yaml',
      ]
    </rosparam>

    <!-- List objects (optional) -->
    <rosparam param="object_config_file_names">
      [
      '{ros_pybullet_interface}/configs/box3.yaml',
      ]
    </rosparam>


  </node>


    <!-- PyRBDL4dIK Environmet node (receiver - publisher) -->
    <node
        name="ros_PyRBDL4dIK_interface"
        pkg="ros_pybullet_interface"
        type="ros_rbdl_IK_interace_node.py"
        output="screen">

      <param
          name="robot_config"
          value="{ros_pybullet_interface}/configs/kuka_push.yaml"
          type="str"/>

    </node>

    <!-- PyRBDL4dIK Environmet node (receiver - publisher) -->
    <!-- <node
        name="ros_JOAO_node"
        pkg="ros_pybullet_interface"
        type="ros_JOAO_node.py"
        output="screen">

      <param
          name="???"
          value="????"
          type="str"/> -->

      <!-- You need to publish into \tf :

        in your init add:
        self.tfBroadcaster = tf2_ros.TransformBroadcaster()

        define the following
        header_frame_id: 'ros_pybullet_interface/world'
        msg_child_frame_id: 'LWR/ros_pybullet_interface/end_effector/target'

        with

        msg = TransformStamped()
        msg.header.stamp = rospy.Time.now()
        msg.header.frame_id = self.msg_header_frame_id
        msg.child_frame_id = self.msg_child_frame_id
        msg.transform.translation.x = motion[0]
        msg.transform.translation.y = motion[1]
        msg.transform.translation.z = motion[2]
        msg.transform.rotation.x = motion[3]
        msg.transform.rotation.y = motion[4]
        msg.transform.rotation.z = motion[5]
        msg.transform.rotation.w = motion[6] # NOTE: the ordering here may be wrong

        # Publish msg
        self.tfBroadcaster.sendTransform(msg)




     </node> -->


  <node
      pkg="tf2_ros"
      type="static_transform_publisher"
      name="table_tf_broadcaster"
      args="1.25 1.25 -0.075 -1.5707963267948966 0.0 3.141592653589793 ros_pybullet_interface/world table"
      />

    <node
        pkg="tf2_ros"
        type="static_transform_publisher"
        name="box1_tf_broadcaster"
        args="-0.05 0.75 0.07 0.0 0.0 0.0 ros_pybullet_interface/world ros_pybullet_interface/box1"
        />

    <node
        pkg="tf2_ros"
        type="static_transform_publisher"
        name="box2_tf_broadcaster"
        args="0.4 0.0 -0.06 0.0 0.0 0.0 ros_pybullet_interface/world ros_pybullet_interface/box2"
        />


</launch>
